/*
 * CodeScan for IntelliJ IDEA
 * Copyright (C) 2015-2021 SonarSource
 * sonarlint@sonarsource.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */
package org.sonarlint.intellij.issue.vulnerabilities

import org.sonarlint.intellij.issue.Flow
import org.sonarlint.intellij.issue.Location
import org.sonarsource.sonarlint.core.client.api.connected.ServerIssue
import java.time.Instant

class LocalTaintVulnerability(private val primaryLocation: Location, val flows: List<Flow>, private val remoteTaintVulnerability: ServerIssue) {
  fun rangeMarker() = primaryLocation.range
  fun file() = primaryLocation.file
  fun key(): String = remoteTaintVulnerability.key()
  fun message(): String = remoteTaintVulnerability.message ?: ""
  fun creationDate(): Instant = remoteTaintVulnerability.creationDate()
  fun severity(): String = remoteTaintVulnerability.severity()
  fun ruleKey(): String = remoteTaintVulnerability.ruleKey()
  fun type(): String = remoteTaintVulnerability.type()
  fun isValid() = file()?.isValid == true && rangeMarker()?.isValid == true
}
