/*
 * CodeScan for IntelliJ IDEA
 * Copyright (C) 2015-2021 SonarSource
 * sonarlint@sonarsource.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */
package org.sonarlint.intellij.ui.nodes

import com.intellij.openapi.util.text.StringUtil
import com.intellij.ui.SimpleTextAttributes
import com.intellij.ui.scale.JBUIScale
import icons.SonarLintIcons
import org.sonarlint.intellij.issue.vulnerabilities.LocalTaintVulnerability
import org.sonarlint.intellij.ui.tree.TreeCellRenderer
import org.sonarlint.intellij.util.CompoundIcon
import org.sonarsource.sonarlint.core.client.api.util.DateUtils
import java.util.Locale
import java.util.Objects
import javax.swing.Icon


class LocalTaintVulnerabilityNode(val issue: LocalTaintVulnerability) : AbstractNode() {

    override fun render(renderer: TreeCellRenderer) {
        val severity = StringUtil.capitalize(issue.severity().toLowerCase(Locale.ENGLISH))
        val type = issue.type()
        val typeStr = type.replace('_', ' ').toLowerCase(Locale.ENGLISH)
        renderer.setIconToolTip("$severity $typeStr")
        val gap = if (JBUIScale.isUsrHiDPI()) 8 else 4
        setIcon(
            renderer,
            CompoundIcon(
                CompoundIcon.Axis.X_AXIS,
                gap,
                SonarLintIcons.type12(type),
                SonarLintIcons.severity12(severity)
            )
        )
        renderer.append(issueCoordinates(issue), SimpleTextAttributes.GRAY_ATTRIBUTES)
        renderer.toolTipText = "Double click to open location"
        renderer.append(issue.message())

        renderer.append(" ")
        val creationDate = DateUtils.toAge(issue.creationDate().toEpochMilli())
        renderer.append(creationDate, SimpleTextAttributes.GRAY_ATTRIBUTES)
    }

    private fun setIcon(renderer: TreeCellRenderer, icon: Icon) {
        renderer.icon = icon
    }

    override fun getIssueCount(): Int {
        return 1
    }

    private fun issueCoordinates(issue: LocalTaintVulnerability): String {
        val range = issue.rangeMarker() ?: return "(0, 0) "
        if (!issue.isValid()) {
            return "(-, -) "
        }

        val doc = range.document
        val line = doc.getLineNumber(range.startOffset)
        val offset = range.startOffset - doc.getLineStartOffset(line)
        return String.format("(%d, %d) ", line + 1, offset)
    }

    override fun equals(other: Any?): Boolean {
        return other is LocalTaintVulnerabilityNode && other.issue.key() == issue.key()
    }

    override fun hashCode(): Int {
        return Objects.hash(issue.key())
    }

}
